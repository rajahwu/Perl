"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findMarkdownFiles = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const __1 = require("..");
const separateFilesAndDirs = (fileInfos) => ({
    directories: fileInfos.filter(info => info.stat.isDirectory() && !__1.IGNORED_DIRS.includes(info.name)),
    markdownFiles: fileInfos.filter(info => info.stat.isFile() && __1.MARKDOWN_EXTENSIONS.includes(path_1.default.extname(info.name))),
});
const findRec = (currentPath) => {
    const getStat = (entry) => {
        const target = path_1.default.resolve(currentPath, entry);
        const stat = fs_1.default.statSync(target);
        return {
            stat,
            name: entry,
            path: target,
        };
    };
    const process = (fileInfos) => {
        const res = separateFilesAndDirs(fileInfos);
        const tgts = res.directories.map(info => info.path);
        if (res.markdownFiles.length) {
            console.log('\nFound %s in "%s"', res.markdownFiles.map(info => info.name).join(', '), currentPath);
        }
        else {
            console.log('\nFound nothing in "%s"', currentPath);
        }
        return {
            markdownFiles: res.markdownFiles,
            subdirs: tgts,
        };
    };
    const stats = fs_1.default.readdirSync(currentPath).map(getStat);
    const res = process(stats);
    const markdownsInSubdirs = res.subdirs.map(findRec);
    return res.markdownFiles.concat(...markdownsInSubdirs);
};
// Finds all markdown files in given directory and its sub-directories
// @param {String  } dir - the absolute directory to search in
const findMarkdownFiles = (dir) => {
    return findRec(dir);
};
exports.findMarkdownFiles = findMarkdownFiles;
exports.default = exports.findMarkdownFiles;
