"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getParamsSection = exports.extractParams = exports.getStartSection = void 0;
const getBoolValue = (input) => !['false', '0', '', 'no', 'n'].includes(input.trim().toLowerCase());
const converter = {
    maxHeaderLevel: (value) => Number(value),
    isNotitle: (value) => getBoolValue(value),
    isFolding: (value) => getBoolValue(value),
    processAll: (value) => getBoolValue(value),
    updateOnly: (value) => getBoolValue(value),
    isCustomMode: (value) => getBoolValue(value),
    mode: (value) => String(value),
    moduleName: (value) => String(value),
    title: (value) => String(value),
    entryPrefix: (value) => String(value),
    customTemplate: (value) => String(value),
    itemTemplate: (value) => String(value),
    separator: (value) => String(value),
    footer: (value) => String(value),
};
const getStartSection = (lines, info, matchesEnd) => {
    if (!info.hasStart) {
        return [];
    }
    // eslint-disable-next-line no-magic-numbers
    for (let index = info.startIdx + 1; index < info.endIdx; ++index) {
        if (!/-->$/.test(lines[index].trim())) {
            return lines.slice(info.startIdx, index);
        }
    }
    // consider empty toc with params
    if (info.endIdx < lines.length && matchesEnd(lines[info.endIdx])) {
        return lines.slice(info.startIdx, info.endIdx);
    }
    return [lines[info.startIdx]];
};
exports.getStartSection = getStartSection;
const extractParams = (section) => {
    var _a, _b;
    return Object.assign({}, ...((_b = (_a = section.match(/\s+param::(\w+)::(.*?)::/g)) === null || _a === void 0 ? void 0 : _a.map(target => target.match(/param::(\w+)::(.*?)::/)).filter((items) => items !== null && items[1] in converter).map(items => ({ [items[1]]: converter[items[1]](items[2]) }))) !== null && _b !== void 0 ? _b : []));
};
exports.extractParams = extractParams;
const getParamsSection = (options) => {
    if (!Object.keys(options).length) {
        return '';
    }
    return '\n' + Object.entries(options).map(([key, value]) => `<!-- param::${key}::${value}:: -->`).join('\n');
};
exports.getParamsSection = getParamsSection;
