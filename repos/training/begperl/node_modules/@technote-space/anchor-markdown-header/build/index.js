"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.anchor = exports.getUrlHash = exports.getEncodeUriMethod = exports.getReplaceMethod = exports.getGitlabId = exports.getGhostId = exports.getBasicGhostId = exports.getBitbucketId = exports.getGithubId = exports.getBasicGithubId = exports.getNodejsId = void 0;
const emoji_regex_1 = __importDefault(require("emoji-regex"));
// https://github.com/joyent/node/blob/192192a09e2d2e0d6bdd0934f602d2dbbf10ed06/tools/doc/html.js#L172-L183
const getNodejsId = (text, repetition) => {
    text = text.replace(/[^a-z0-9]+/g, '_');
    text = text.replace(/^_+|_+$/, '');
    text = text.replace(/^([^a-z])/, '_$1');
    // If no repetition, or if the repetition is 0 then ignore. Otherwise append '_' and the number.
    // An example may be found here: http://nodejs.org/api/domain.html#domain_example_1
    if (repetition) {
        text += '_' + repetition;
    }
    return text;
};
exports.getNodejsId = getNodejsId;
const getBasicGithubId = (text) => {
    return text
        // numeric character references
        .replace(/&#(\d+);/ig, (match, $1) => String.fromCharCode($1).toLowerCase())
        // to hyphen
        .replace(/ /g, '-')
        // escape codes
        .replace(/%([abcdef]|\d){2}/ig, '')
        // single chars that are removed
        .replace(/[/?!:[\]`.,()*"';{}+=<>~$|#@%^&¥–—]/g, '')
        // CJK punctuations that are removed
        .replace(/[。？！，、；：“”【】（）〔〕［］﹃﹄ ‘’﹁﹂—…－～《》〈〉「」]/g, '');
};
exports.getBasicGithubId = getBasicGithubId;
const getGithubId = (text, repetition) => {
    text = (0, exports.getBasicGithubId)(text);
    // If no repetition, or if the repetition is 0 then ignore. Otherwise append '-' and the number.
    if (repetition) {
        text += '-' + repetition;
    }
    // Strip emojis
    text = text.replace((0, emoji_regex_1.default)(), '');
    return text;
};
exports.getGithubId = getGithubId;
const getBitbucketId = (text, repetition) => {
    text = 'markdown-header-' + (0, exports.getBasicGithubId)(text);
    // BitBucket condenses consecutive hyphens (GitHub doesn't)
    text = text.replace(/--+/g, '-');
    // If no repetition, or if the repetition is 0 then ignore. Otherwise append '_' and the number.
    // https://groups.google.com/d/msg/bitbucket-users/XnEWbbzs5wU/Fat0UdIecZkJ
    if (repetition) {
        text += '_' + repetition;
    }
    return text;
};
exports.getBitbucketId = getBitbucketId;
const getBasicGhostId = (text) => {
    return text.replace(/ /g, '')
        // escape codes are not removed
        // single chars that are removed
        .replace(/[/?:[\]`.,()*"';{}\-+=<>!@#%^&\\|]/g, '')
        // $ replaced with d
        .replace(/\$/g, 'd')
        // ~ replaced with t
        .replace(/~/g, 't');
};
exports.getBasicGhostId = getBasicGhostId;
const getGhostId = (text) => {
    text = (0, exports.getBasicGhostId)(text);
    // Repetitions not supported
    return text;
};
exports.getGhostId = getGhostId;
// see: https://github.com/gitlabhq/gitlabhq/blob/master/doc/user/markdown.md#header-ids-and-links
const getGitlabId = (text, repetition) => {
    text = text
        .replace(/<(.*)>(.*)<\/\1>/g, '$2') // html tags
        .replace(/!\[.*]\(.*\)/g, '') // image tags
        .replace(/\[(.*)]\(.*\)/, '$1') // url
        .replace(/\s+/g, '-') // All spaces are converted to hyphens
        .replace(/[/?!:[\]`.,()*"';{}+=<>~$|#@]/g, '') // All non-word text (e.g., punctuation, HTML) is removed
        .replace(/[。？！，、；：“”【】（）〔〕［］﹃﹄ ‘’﹁﹂—…－～《》〈〉「」]/g, '') // remove CJK punctuations
        .replace(/[-]+/g, '-') // duplicated hyphen
        .replace(/^-/, '') // ltrim hyphen
        .replace(/-$/, ''); // rtrim hyphen
    // If no repetition, or if the repetition is 0 then ignore. Otherwise append '-' and the number.
    if (repetition) {
        text += '-' + repetition;
    }
    return text;
};
exports.getGitlabId = getGitlabId;
const getReplaceMethod = (mode, repetition, moduleName) => {
    switch (mode) {
        case 'github.com':
            return exports.getGithubId;
        case 'bitbucket.org':
            return exports.getBitbucketId;
        case 'gitlab.com':
            return exports.getGitlabId;
        case 'nodejs.org':
            if (!moduleName) {
                throw new Error('Need module name to generate proper anchor for ' + mode);
            }
            return (hd, repetition) => {
                return (0, exports.getNodejsId)(moduleName + '.' + hd, repetition);
            };
        case 'ghost.org':
            return exports.getGhostId;
        default:
            throw new Error('Unknown mode: ' + mode);
    }
};
exports.getReplaceMethod = getReplaceMethod;
const getEncodeUriMethod = (mode) => {
    if (mode === 'github.com') {
        return (uri) => {
            const newURI = encodeURI(uri);
            // encodeURI replaces the zero width joiner character
            // (used to generate emoji sequences, e.g.Female Construction Worker 👷🏼‍♀️)
            // github doesn't URL encode them, so we replace them after url encoding to preserve the zwj character.
            return newURI.replace(/%E2%80%8D/g, '\u200D');
        };
    }
    return encodeURI;
};
exports.getEncodeUriMethod = getEncodeUriMethod;
const getUrlHash = (header, mode, repetition, moduleName) => {
    const asciiOnlyToLowerCase = (input) => {
        let result = '';
        [...Array(input.length).keys()].forEach(index => {
            if (input[index] >= 'A' && input[index] <= 'Z') {
                result += input[index].toLowerCase();
            }
            else {
                result += input[index];
            }
        });
        return result;
    };
    return (0, exports.getEncodeUriMethod)(mode)((0, exports.getReplaceMethod)(mode, repetition, moduleName)(asciiOnlyToLowerCase(header.trim()), repetition));
};
exports.getUrlHash = getUrlHash;
const anchor = (header, mode, repetition, moduleName) => '[' + header + '](#' + (0, exports.getUrlHash)(header, mode || 'github.com', repetition, moduleName) + ')';
exports.anchor = anchor;
exports.default = exports.anchor;
