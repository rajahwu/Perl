"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHtmlHeaders = void 0;
const htmlparser = __importStar(require("htmlparser2"));
const md = __importStar(require("@textlint/markdown-to-ast"));
const addLinenos = (lines, headers) => {
    let current = 0;
    return headers.map(header => {
        for (let lineno = current; lineno < lines.length; lineno++) {
            const line = lines[lineno];
            if (new RegExp(header.text[0]).test(line)) {
                current = lineno;
                return Object.assign(Object.assign({}, header), { line: lineno, name: header.text.join('') });
            }
        }
        // in case we didn't find a matching line, which is odd,
        // we'll have to assume it's right on the next line
        return Object.assign(Object.assign({}, header), { line: ++current, name: header.text.join('') });
    });
};
const rankify = (headers, max) => headers.map(header => (Object.assign(Object.assign({}, header), { 
    // eslint-disable-next-line no-magic-numbers
    rank: parseInt(header.tag.slice(1), 10) }))).filter(header => header.rank <= max);
const getHtmlHeaders = (lines, maxHeaderLevel) => {
    const source = md.parse(lines.join('\n'))
        .children
        .filter(node => node.type === md.Syntax.HtmlBlock || node.type === md.Syntax.Html)
        .map(node => node.raw)
        .join('\n');
    const headers = [];
    const grabbing = [];
    const text = [];
    const parser = new htmlparser.Parser({
        onopentag: name => {
            // Short circuit if we're already inside a pre
            // eslint-disable-next-line no-magic-numbers
            if (grabbing[grabbing.length - 1] === 'pre') {
                return;
            }
            if (name === 'pre' || (/h\d/).test(name)) {
                grabbing.push(name);
            }
        },
        ontext: text_ => {
            // Explicitly skip pre tags, and implicitly skip all others
            // eslint-disable-next-line no-magic-numbers
            if (!grabbing.length || grabbing[grabbing.length - 1] === 'pre') {
                return;
            }
            text.push(text_);
        },
        onclosetag: name => {
            if (!grabbing.length) {
                return;
            }
            // eslint-disable-next-line no-magic-numbers
            if (grabbing[grabbing.length - 1] === name) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                headers.push({ text: [...text], tag: grabbing.pop() });
                text.length = 0;
            }
        },
    }, { decodeEntities: true });
    parser.write(source);
    parser.end();
    return rankify(addLinenos(lines, headers), maxHeaderLevel);
};
exports.getHtmlHeaders = getHtmlHeaders;
